// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/gas/gas_detect.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GasDetectServiceClient is the client API for GasDetectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GasDetectServiceClient interface {
	// Creates a Workflow
	CreateGasDetect(ctx context.Context, in *CreateGasDetectRequest, opts ...grpc.CallOption) (*GasDetectResponse, error)
	GetGasDetect(ctx context.Context, in *GetGasDetectRequest, opts ...grpc.CallOption) (*GasDetectResponse, error)
	DeleteGasDetect(ctx context.Context, in *DeleteGasDetectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListGasDetect(ctx context.Context, in *ListGasDetectRequest, opts ...grpc.CallOption) (*ListGasDetectResponse, error)
}

type gasDetectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGasDetectServiceClient(cc grpc.ClientConnInterface) GasDetectServiceClient {
	return &gasDetectServiceClient{cc}
}

func (c *gasDetectServiceClient) CreateGasDetect(ctx context.Context, in *CreateGasDetectRequest, opts ...grpc.CallOption) (*GasDetectResponse, error) {
	out := new(GasDetectResponse)
	err := c.cc.Invoke(ctx, "/api.gas.GasDetectService/CreateGasDetect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasDetectServiceClient) GetGasDetect(ctx context.Context, in *GetGasDetectRequest, opts ...grpc.CallOption) (*GasDetectResponse, error) {
	out := new(GasDetectResponse)
	err := c.cc.Invoke(ctx, "/api.gas.GasDetectService/GetGasDetect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasDetectServiceClient) DeleteGasDetect(ctx context.Context, in *DeleteGasDetectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.gas.GasDetectService/DeleteGasDetect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasDetectServiceClient) ListGasDetect(ctx context.Context, in *ListGasDetectRequest, opts ...grpc.CallOption) (*ListGasDetectResponse, error) {
	out := new(ListGasDetectResponse)
	err := c.cc.Invoke(ctx, "/api.gas.GasDetectService/ListGasDetect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GasDetectServiceServer is the server API for GasDetectService service.
// All implementations must embed UnimplementedGasDetectServiceServer
// for forward compatibility
type GasDetectServiceServer interface {
	// Creates a Workflow
	CreateGasDetect(context.Context, *CreateGasDetectRequest) (*GasDetectResponse, error)
	GetGasDetect(context.Context, *GetGasDetectRequest) (*GasDetectResponse, error)
	DeleteGasDetect(context.Context, *DeleteGasDetectRequest) (*emptypb.Empty, error)
	ListGasDetect(context.Context, *ListGasDetectRequest) (*ListGasDetectResponse, error)
	mustEmbedUnimplementedGasDetectServiceServer()
}

// UnimplementedGasDetectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGasDetectServiceServer struct {
}

func (UnimplementedGasDetectServiceServer) CreateGasDetect(context.Context, *CreateGasDetectRequest) (*GasDetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasDetect not implemented")
}
func (UnimplementedGasDetectServiceServer) GetGasDetect(context.Context, *GetGasDetectRequest) (*GasDetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasDetect not implemented")
}
func (UnimplementedGasDetectServiceServer) DeleteGasDetect(context.Context, *DeleteGasDetectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGasDetect not implemented")
}
func (UnimplementedGasDetectServiceServer) ListGasDetect(context.Context, *ListGasDetectRequest) (*ListGasDetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGasDetect not implemented")
}
func (UnimplementedGasDetectServiceServer) mustEmbedUnimplementedGasDetectServiceServer() {}

// UnsafeGasDetectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GasDetectServiceServer will
// result in compilation errors.
type UnsafeGasDetectServiceServer interface {
	mustEmbedUnimplementedGasDetectServiceServer()
}

func RegisterGasDetectServiceServer(s grpc.ServiceRegistrar, srv GasDetectServiceServer) {
	s.RegisterService(&GasDetectService_ServiceDesc, srv)
}

func _GasDetectService_CreateGasDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasDetectServiceServer).CreateGasDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gas.GasDetectService/CreateGasDetect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasDetectServiceServer).CreateGasDetect(ctx, req.(*CreateGasDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasDetectService_GetGasDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasDetectServiceServer).GetGasDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gas.GasDetectService/GetGasDetect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasDetectServiceServer).GetGasDetect(ctx, req.(*GetGasDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasDetectService_DeleteGasDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasDetectServiceServer).DeleteGasDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gas.GasDetectService/DeleteGasDetect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasDetectServiceServer).DeleteGasDetect(ctx, req.(*DeleteGasDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasDetectService_ListGasDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGasDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasDetectServiceServer).ListGasDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gas.GasDetectService/ListGasDetect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasDetectServiceServer).ListGasDetect(ctx, req.(*ListGasDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GasDetectService_ServiceDesc is the grpc.ServiceDesc for GasDetectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GasDetectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gas.GasDetectService",
	HandlerType: (*GasDetectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGasDetect",
			Handler:    _GasDetectService_CreateGasDetect_Handler,
		},
		{
			MethodName: "GetGasDetect",
			Handler:    _GasDetectService_GetGasDetect_Handler,
		},
		{
			MethodName: "DeleteGasDetect",
			Handler:    _GasDetectService_DeleteGasDetect_Handler,
		},
		{
			MethodName: "ListGasDetect",
			Handler:    _GasDetectService_ListGasDetect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gas/gas_detect.proto",
}
