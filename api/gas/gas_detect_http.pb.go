// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.12
// source: api/gas/gas_detect.proto

package gen

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGasDetectServiceCreateGasDetect = "/api.gas.GasDetectService/CreateGasDetect"
const OperationGasDetectServiceDeleteGasDetect = "/api.gas.GasDetectService/DeleteGasDetect"
const OperationGasDetectServiceGetGasDetect = "/api.gas.GasDetectService/GetGasDetect"
const OperationGasDetectServiceListGasDetect = "/api.gas.GasDetectService/ListGasDetect"

type GasDetectServiceHTTPServer interface {
	CreateGasDetect(context.Context, *CreateGasDetectRequest) (*GasDetectResponse, error)
	DeleteGasDetect(context.Context, *DeleteGasDetectRequest) (*emptypb.Empty, error)
	GetGasDetect(context.Context, *GetGasDetectRequest) (*GasDetectResponse, error)
	ListGasDetect(context.Context, *ListGasDetectRequest) (*ListGasDetectResponse, error)
}

func RegisterGasDetectServiceHTTPServer(s *http.Server, srv GasDetectServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/gas-detect/create", _GasDetectService_CreateGasDetect0_HTTP_Handler(srv))
	r.GET("/api/gas-detect/get", _GasDetectService_GetGasDetect0_HTTP_Handler(srv))
	r.DELETE("/api/gas-detect/delete", _GasDetectService_DeleteGasDetect0_HTTP_Handler(srv))
	r.GET("/api/gas-detect/list", _GasDetectService_ListGasDetect0_HTTP_Handler(srv))
}

func _GasDetectService_CreateGasDetect0_HTTP_Handler(srv GasDetectServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGasDetectRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasDetectServiceCreateGasDetect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGasDetect(ctx, req.(*CreateGasDetectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GasDetectResponse)
		return ctx.Result(200, reply)
	}
}

func _GasDetectService_GetGasDetect0_HTTP_Handler(srv GasDetectServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGasDetectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasDetectServiceGetGasDetect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGasDetect(ctx, req.(*GetGasDetectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GasDetectResponse)
		return ctx.Result(200, reply)
	}
}

func _GasDetectService_DeleteGasDetect0_HTTP_Handler(srv GasDetectServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGasDetectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasDetectServiceDeleteGasDetect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGasDetect(ctx, req.(*DeleteGasDetectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _GasDetectService_ListGasDetect0_HTTP_Handler(srv GasDetectServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGasDetectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasDetectServiceListGasDetect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGasDetect(ctx, req.(*ListGasDetectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGasDetectResponse)
		return ctx.Result(200, reply)
	}
}

type GasDetectServiceHTTPClient interface {
	CreateGasDetect(ctx context.Context, req *CreateGasDetectRequest, opts ...http.CallOption) (rsp *GasDetectResponse, err error)
	DeleteGasDetect(ctx context.Context, req *DeleteGasDetectRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetGasDetect(ctx context.Context, req *GetGasDetectRequest, opts ...http.CallOption) (rsp *GasDetectResponse, err error)
	ListGasDetect(ctx context.Context, req *ListGasDetectRequest, opts ...http.CallOption) (rsp *ListGasDetectResponse, err error)
}

type GasDetectServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewGasDetectServiceHTTPClient(client *http.Client) GasDetectServiceHTTPClient {
	return &GasDetectServiceHTTPClientImpl{client}
}

func (c *GasDetectServiceHTTPClientImpl) CreateGasDetect(ctx context.Context, in *CreateGasDetectRequest, opts ...http.CallOption) (*GasDetectResponse, error) {
	var out GasDetectResponse
	pattern := "/api/gas-detect/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGasDetectServiceCreateGasDetect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GasDetectServiceHTTPClientImpl) DeleteGasDetect(ctx context.Context, in *DeleteGasDetectRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/gas-detect/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGasDetectServiceDeleteGasDetect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GasDetectServiceHTTPClientImpl) GetGasDetect(ctx context.Context, in *GetGasDetectRequest, opts ...http.CallOption) (*GasDetectResponse, error) {
	var out GasDetectResponse
	pattern := "/api/gas-detect/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGasDetectServiceGetGasDetect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GasDetectServiceHTTPClientImpl) ListGasDetect(ctx context.Context, in *ListGasDetectRequest, opts ...http.CallOption) (*ListGasDetectResponse, error) {
	var out ListGasDetectResponse
	pattern := "/api/gas-detect/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGasDetectServiceListGasDetect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
