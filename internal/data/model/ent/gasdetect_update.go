// Code generated by ent, DO NOT EDIT.

package ent

import (
	"gas-detect/internal/data/model/ent/gasdetect"
	"gas-detect/internal/data/model/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GasDetectUpdate is the builder for updating GasDetect entities.
type GasDetectUpdate struct {
	config
	hooks    []Hook
	mutation *GasDetectMutation
}

// Where appends a list predicates to the GasDetectUpdate builder.
func (gdu *GasDetectUpdate) Where(ps ...predicate.GasDetect) *GasDetectUpdate {
	gdu.mutation.Where(ps...)
	return gdu
}

// SetIsDeleted sets the "is_deleted" field.
func (gdu *GasDetectUpdate) SetIsDeleted(b bool) *GasDetectUpdate {
	gdu.mutation.SetIsDeleted(b)
	return gdu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (gdu *GasDetectUpdate) SetNillableIsDeleted(b *bool) *GasDetectUpdate {
	if b != nil {
		gdu.SetIsDeleted(*b)
	}
	return gdu
}

// SetMetrics sets the "metrics" field.
func (gdu *GasDetectUpdate) SetMetrics(m []map[string]string) *GasDetectUpdate {
	gdu.mutation.SetMetrics(m)
	return gdu
}

// ClearMetrics clears the value of the "metrics" field.
func (gdu *GasDetectUpdate) ClearMetrics() *GasDetectUpdate {
	gdu.mutation.ClearMetrics()
	return gdu
}

// Mutation returns the GasDetectMutation object of the builder.
func (gdu *GasDetectUpdate) Mutation() *GasDetectMutation {
	return gdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gdu *GasDetectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gdu.hooks) == 0 {
		affected, err = gdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GasDetectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gdu.mutation = mutation
			affected, err = gdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gdu.hooks) - 1; i >= 0; i-- {
			if gdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gdu *GasDetectUpdate) SaveX(ctx context.Context) int {
	affected, err := gdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gdu *GasDetectUpdate) Exec(ctx context.Context) error {
	_, err := gdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gdu *GasDetectUpdate) ExecX(ctx context.Context) {
	if err := gdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gdu *GasDetectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gasdetect.Table,
			Columns: gasdetect.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: gasdetect.FieldID,
			},
		},
	}
	if ps := gdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gdu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: gasdetect.FieldIsDeleted,
		})
	}
	if value, ok := gdu.mutation.Metrics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: gasdetect.FieldMetrics,
		})
	}
	if gdu.mutation.MetricsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: gasdetect.FieldMetrics,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gasdetect.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GasDetectUpdateOne is the builder for updating a single GasDetect entity.
type GasDetectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GasDetectMutation
}

// SetIsDeleted sets the "is_deleted" field.
func (gduo *GasDetectUpdateOne) SetIsDeleted(b bool) *GasDetectUpdateOne {
	gduo.mutation.SetIsDeleted(b)
	return gduo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (gduo *GasDetectUpdateOne) SetNillableIsDeleted(b *bool) *GasDetectUpdateOne {
	if b != nil {
		gduo.SetIsDeleted(*b)
	}
	return gduo
}

// SetMetrics sets the "metrics" field.
func (gduo *GasDetectUpdateOne) SetMetrics(m []map[string]string) *GasDetectUpdateOne {
	gduo.mutation.SetMetrics(m)
	return gduo
}

// ClearMetrics clears the value of the "metrics" field.
func (gduo *GasDetectUpdateOne) ClearMetrics() *GasDetectUpdateOne {
	gduo.mutation.ClearMetrics()
	return gduo
}

// Mutation returns the GasDetectMutation object of the builder.
func (gduo *GasDetectUpdateOne) Mutation() *GasDetectMutation {
	return gduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gduo *GasDetectUpdateOne) Select(field string, fields ...string) *GasDetectUpdateOne {
	gduo.fields = append([]string{field}, fields...)
	return gduo
}

// Save executes the query and returns the updated GasDetect entity.
func (gduo *GasDetectUpdateOne) Save(ctx context.Context) (*GasDetect, error) {
	var (
		err  error
		node *GasDetect
	)
	if len(gduo.hooks) == 0 {
		node, err = gduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GasDetectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gduo.mutation = mutation
			node, err = gduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gduo.hooks) - 1; i >= 0; i-- {
			if gduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GasDetect)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GasDetectMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gduo *GasDetectUpdateOne) SaveX(ctx context.Context) *GasDetect {
	node, err := gduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gduo *GasDetectUpdateOne) Exec(ctx context.Context) error {
	_, err := gduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gduo *GasDetectUpdateOne) ExecX(ctx context.Context) {
	if err := gduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gduo *GasDetectUpdateOne) sqlSave(ctx context.Context) (_node *GasDetect, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gasdetect.Table,
			Columns: gasdetect.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: gasdetect.FieldID,
			},
		},
	}
	id, ok := gduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GasDetect.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gasdetect.FieldID)
		for _, f := range fields {
			if !gasdetect.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gasdetect.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gduo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: gasdetect.FieldIsDeleted,
		})
	}
	if value, ok := gduo.mutation.Metrics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: gasdetect.FieldMetrics,
		})
	}
	if gduo.mutation.MetricsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: gasdetect.FieldMetrics,
		})
	}
	_node = &GasDetect{config: gduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gasdetect.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
