// Code generated by ent, DO NOT EDIT.

package ent

import (
	"gas-detect/internal/data/model/ent/gasdetect"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// GasDetect is the model entity for the GasDetect schema.
type GasDetect struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// Metrics holds the value of the "metrics" field.
	Metrics []map[string]string `json:"metrics,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GasDetect) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case gasdetect.FieldMetrics:
			values[i] = new([]byte)
		case gasdetect.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case gasdetect.FieldID:
			values[i] = new(sql.NullInt64)
		case gasdetect.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GasDetect", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GasDetect fields.
func (gd *GasDetect) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gasdetect.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gd.ID = int32(value.Int64)
		case gasdetect.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				gd.CreatedTime = value.Time
			}
		case gasdetect.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				gd.IsDeleted = value.Bool
			}
		case gasdetect.FieldMetrics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metrics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gd.Metrics); err != nil {
					return fmt.Errorf("unmarshal field metrics: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GasDetect.
// Note that you need to call GasDetect.Unwrap() before calling this method if this GasDetect
// was returned from a transaction, and the transaction was committed or rolled back.
func (gd *GasDetect) Update() *GasDetectUpdateOne {
	return (&GasDetectClient{config: gd.config}).UpdateOne(gd)
}

// Unwrap unwraps the GasDetect entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gd *GasDetect) Unwrap() *GasDetect {
	_tx, ok := gd.config.driver.(*txDriver)
	if !ok {
		panic("ent: GasDetect is not a transactional entity")
	}
	gd.config.driver = _tx.drv
	return gd
}

// String implements the fmt.Stringer.
func (gd *GasDetect) String() string {
	var builder strings.Builder
	builder.WriteString("GasDetect(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gd.ID))
	builder.WriteString("created_time=")
	builder.WriteString(gd.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", gd.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("metrics=")
	builder.WriteString(fmt.Sprintf("%v", gd.Metrics))
	builder.WriteByte(')')
	return builder.String()
}

// GasDetects is a parsable slice of GasDetect.
type GasDetects []*GasDetect

func (gd GasDetects) config(cfg config) {
	for _i := range gd {
		gd[_i].config = cfg
	}
}
